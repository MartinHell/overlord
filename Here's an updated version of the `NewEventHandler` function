func NewEventHandler() EventHandler {
    return func(event *mission.StreamEventsResponse_Event) error {
        // Common error handling
        if err := event.Validate(); err != nil {
            log.Printf("Invalid event: %v", err)
            return err
        }

        // Player creation/update logic (extracted into a separate function)
        player, err := createOrUpdatePlayer(event)
        if err != nil {
            return err
        }

        switch event.GetEventType() {
        case mission.StreamEventsResponse_EVENT_TYPE_SHOT:
            // Handle shot events specifically
            break
        case mission.StreamEventsResponse_EVENT_TYPE_BIRTH:
            // Handle birth events specifically
            break
        case mission.StreamEventsResponse_EVENT_TYPE_CONNECT:
            // Handle connect events specifically
            break
        default:
            return errors.New("unknown event type")
        }

        return nil
    }
}

func createOrUpdatePlayer(event *mission.StreamEventsResponse_Event) (*player, error) {
    // Logic to create or update a player in the database based on the event
}
